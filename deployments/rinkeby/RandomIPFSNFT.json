{
  "address": "0x6DF3A9ad993D1E558Eb6C9b856929213ca8D73B0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callBackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "mintFee",
          "type": "uint256"
        },
        {
          "internalType": "string[5]",
          "name": "tokenUri",
          "type": "string[5]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum RandomIPFSNFT.Image",
          "name": "image",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "NFTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "NFTRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChanceArray",
      "outputs": [
        {
          "internalType": "uint256[5]",
          "name": "",
          "type": "uint256[5]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        }
      ],
      "name": "getImage",
      "outputs": [
        {
          "internalType": "enum RandomIPFSNFT.Image",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestNft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_mintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf0634dcbb05c6cf030c732422ac459be14a1055e29cd1791ea990df31a51aa39",
  "receipt": {
    "to": null,
    "from": "0xAf96A982239392DBC1EEb440cf762C299ecEd78f",
    "contractAddress": "0x6DF3A9ad993D1E558Eb6C9b856929213ca8D73B0",
    "transactionIndex": 6,
    "gasUsed": "3477250",
    "logsBloom": "0x
    "blockHash": "0xb8e229c317f51baf03621e552c564bbd00086f037a85f25dbcf22b3b2b38ce99",
    "transactionHash": "0xf0634dcbb05c6cf030c732422ac459be14a1055e29cd1791ea990df31a51aa39",
    "logs": [],
    "blockNumber": 10941864,
    "cumulativeGasUsed": "15915781",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "7550",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "500000",
    "10000000000000000",
    [
      "ipfs://QmVo3HZ2SvA8JjT4VCynZ2yBK8oZUzVf7WcSuwELYxuqcN",
      "ipfs://QmV8gS53FVzEtS1Q95jxqsXaAeCSU8rWsbyN7dN7Ccvt6C",
      "ipfs://Qmek8n7XAj49DphqWMGD5okLFkz9boPWtr2V5ZsdVywShj",
      "ipfs://QmeqJy974NubqbvG1QHP8mNhmgjDq7ebdEBuX5ZJQaDrjT",
      "ipfs://Qme5BskHM1TvbQfQgPBFBnqj4iT6RtUuNijKnSMjHxM3dL"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "f98998714f6223c3c7f529863553f94e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callBackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"internalType\":\"string[5]\",\"name\":\"tokenUri\",\"type\":\"string[5]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum RandomIPFSNFT.Image\",\"name\":\"image\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"NFTRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChanceArray\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"getImage\",\"outputs\":[{\"internalType\":\"enum RandomIPFSNFT.Image\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RandomIPFSNFT.sol\":\"RandomIPFSNFT\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/RandomIPFSNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.5;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\n\\ncontract RandomIPFSNFT is VRFConsumerBaseV2, ERC721URIStorage {\\n    // when we mint an NFT a random number will be generated. Using that number we will get a Random NFT of OLivia Sanabia.\\n\\n    VRFCoordinatorV2Interface private immutable i_COORDINATOR;\\n    uint64 private s_subscriptionId;\\n    bytes32 private s_gasLane;\\n    uint32 private s_callBackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private NUM_WORDS = 1;\\n\\n    mapping(uint256 => address) requestIdtoAddress;\\n    string[5] internal OliviaTokenURIS; /*= [\\n    //     \\\"ipfs://bafybeibje6aple2galwbs2wpqelshwzpy6kni3pvc4c5gkhb6haz3lfmkm.ipfs.localhost:8080/?filename=oli1.png\\\",\\n    //     \\\"ipfs://bafybeiat7eqnk6sp4g252cktkarq33qpzhnzt76fpelfixsoikxrk3qwdq.ipfs.localhost:8080/?filename=oli2.png\\\",\\n    //     \\\"ipfs://bafybeif5zcg5mfe44bbtzzd5n4o32jplczzl3nzd6hcrrbzb2ae6c56dfa.ipfs.localhost:8080/?filename=oli3.png\\\",\\n    //     \\\"ipfs://bafybeihvacpsyc2kkim544bvtcl3sfjonsgizooetco5zbw4dzhbv2h3ci.ipfs.localhost:8080/?filename=oli4.png\\\",\\n    //     \\\"ipfs://bafybeiegq7mb2hnjqgu6fglz6rvxe3b2spzufrp2rkfs3ifznlxhjgi24q.ipfs.localhost:8080/?filename=oli5.png\\\"\\n    // ];*/\\n\\n    uint256 public tokenCounter;\\n    uint256 public s_mintFee;\\n    address owner;\\n\\n    event NFTRequested(uint256 requestId, address requester);\\n    event NFTMinted(Image image, address minter);\\n\\n    enum Image {\\n        OLI_CAR,\\n        OLI_AWARDS,\\n        OLI_DISNEY,\\n        OLI_RESTING,\\n        OLI_GRADUATE\\n    }\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane,\\n        uint32 callBackGasLimit,\\n        uint256 mintFee,\\n        string[5] memory tokenUri\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) ERC721(\\\"Random IPFS\\\\\\n    NFT\\\", \\\"RIN\\\") {\\n        i_COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        s_subscriptionId = subscriptionId;\\n        s_gasLane = gasLane;\\n        s_callBackGasLimit = callBackGasLimit;\\n        s_mintFee = mintFee;\\n        owner = msg.sender;\\n        OliviaTokenURIS = tokenUri;\\n    }\\n\\n    function requestNft() public payable returns (uint256 requestId) {\\n        require(msg.value >= s_mintFee, \\\"Cannot Mint due to insufficient fees\\\");\\n        requestId = i_COORDINATOR.requestRandomWords(\\n            s_gasLane,\\n            s_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            s_callBackGasLimit,\\n            NUM_WORDS\\n        );\\n\\n        requestIdtoAddress[requestId] = msg.sender;\\n\\n        emit NFTRequested(requestId, msg.sender);\\n    }\\n\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\\n        internal\\n        override\\n    {\\n        address nftOwner = requestIdtoAddress[requestId];\\n        uint256 randomNumber = randomWords[0] % 100;\\n        Image randomNft = getImage(randomNumber);\\n        _safeMint(nftOwner, tokenCounter);\\n        _setTokenURI(tokenCounter, OliviaTokenURIS[uint256(randomNft)]);\\n        tokenCounter += 1;\\n\\n        emit NFTMinted(randomNft, nftOwner);\\n    }\\n\\n    function getImage(uint256 randomNumber) public pure returns (Image) {\\n        uint256[5] memory arr = getChanceArray();\\n        uint256 prev = 0;\\n        for (uint256 i = 0; i < arr.length; i++) {\\n            if (randomNumber > prev && randomNumber <= arr[i]) {\\n                return Image(i);\\n            }\\n\\n            prev = arr[i];\\n        }\\n    }\\n\\n    function getChanceArray() public pure returns (uint256[5] memory) {\\n        uint256[5] memory arr;\\n        arr[0] = 10;\\n        arr[1] = 35;\\n        arr[2] = 67;\\n        arr[3] = 81;\\n        arr[4] = 100;\\n\\n        return arr;\\n    }\\n\\n    function withdraw() public returns (bool) {\\n        require(owner == msg.sender, \\\"Not have the permission to withdraw\\\");\\n        (bool succ, ) = payable(owner).call{value: address(this).balance}(\\\"\\\");\\n        return succ;\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        return OliviaTokenURIS[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0xce1475b8f8caec783ed1328ba1ded7fce01770dff9d6187b23923f2be6830d47\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526001600960046101000a81548163ffffffff021916908363ffffffff1602179055503480156200003357600080fd5b5060405162003d5938038062003d5983398181016040528101906200005991906200054e565b6040518060400160405280601281526020017f52616e646f6d2049504653202020204e465400000000000000000000000000008152506040518060400160405280600381526020017f52494e0000000000000000000000000000000000000000000000000000000000815250878073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505081600090805190602001906200011692919062000222565b5080600190805190602001906200012f92919062000222565b5050508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505084600760006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508360088190555082600960006101000a81548163ffffffff021916908363ffffffff1602179055508160118190555033601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600b90600562000215929190620002b3565b50505050505050620008a9565b828054620002309062000733565b90600052602060002090601f016020900481019282620002545760008555620002a0565b82601f106200026f57805160ff1916838001178555620002a0565b82800160010185558215620002a0579182015b828111156200029f57825182559160200191906001019062000282565b5b509050620002af91906200030d565b5090565b8260058101928215620002fa579160200282015b82811115620002f9578251829080519060200190620002e892919062000222565b5091602001919060010190620002c7565b5b5090506200030991906200032c565b5090565b5b80821115620003285760008160009055506001016200030e565b5090565b5b8082111562000350576000818162000346919062000354565b506001016200032d565b5090565b508054620003629062000733565b6000825580601f1062000376575062000397565b601f0160209004906000526020600020908101906200039691906200030d565b5b50565b6000620003b1620003ab8462000632565b62000609565b90508082856020860282011115620003ce57620003cd62000802565b5b60005b858110156200042357815167ffffffffffffffff811115620003f857620003f7620007fd565b5b808601620004078982620004d6565b85526020850194506020840193505050600181019050620003d1565b5050509392505050565b6000620004446200043e846200065b565b62000609565b90508281526020810184848401111562000463576200046262000807565b5b62000470848285620006fd565b509392505050565b600081519050620004898162000827565b92915050565b600082601f830112620004a757620004a6620007fd565b5b6005620004b68482856200039a565b91505092915050565b600081519050620004d08162000841565b92915050565b600082601f830112620004ee57620004ed620007fd565b5b8151620005008482602086016200042d565b91505092915050565b6000815190506200051a816200085b565b92915050565b600081519050620005318162000875565b92915050565b60008151905062000548816200088f565b92915050565b60008060008060008060c087890312156200056e576200056d62000811565b5b60006200057e89828a0162000478565b96505060206200059189828a0162000537565b9550506040620005a489828a01620004bf565b9450506060620005b789828a0162000520565b9350506080620005ca89828a0162000509565b92505060a087015167ffffffffffffffff811115620005ee57620005ed6200080c565b5b620005fc89828a016200048f565b9150509295509295509295565b60006200061562000628565b905062000623828262000769565b919050565b6000604051905090565b600067ffffffffffffffff82111562000650576200064f620007ce565b5b602082029050919050565b600067ffffffffffffffff821115620006795762000678620007ce565b5b620006848262000816565b9050602081019050919050565b60006200069e82620006af565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60005b838110156200071d57808201518184015260208101905062000700565b838111156200072d576000848401525b50505050565b600060028204905060018216806200074c57607f821691505b602082108114156200076357620007626200079f565b5b50919050565b620007748262000816565b810181811067ffffffffffffffff82111715620007965762000795620007ce565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b620008328162000691565b81146200083e57600080fd5b50565b6200084c81620006a5565b81146200085857600080fd5b50565b6200086681620006cf565b81146200087257600080fd5b50565b6200088081620006d9565b81146200088c57600080fd5b50565b6200089a81620006e9565b8114620008a657600080fd5b50565b60805160601c60a05160601c61347d620008dc6000396000610e080152600081816107f8015261084c015261347d6000f3fe60806040526004361061011f5760003560e01c80635dacf5f4116100a0578063aa15249111610064578063aa152491146103f9578063b88d4fde14610417578063c87b56dd14610440578063d082e3811461047d578063e985e9c5146104a85761011f565b80635dacf5f4146103005780636352211e1461032b57806370a082311461036857806395d89b41146103a5578063a22cb465146103d05761011f565b806323b872dd116100e757806323b872dd1461021b5780632607aafa146102445780633ccfd60b146102815780634223edf7146102ac57806342842e0e146102d75761011f565b806301ffc9a71461012457806306fdde0314610161578063081812fc1461018c578063095ea7b3146101c95780631fe543e3146101f2575b600080fd5b34801561013057600080fd5b5061014b600480360381019061014691906121ff565b6104e5565b604051610158919061278a565b60405180910390f35b34801561016d57600080fd5b506101766105c7565b604051610183919061283c565b60405180910390f35b34801561019857600080fd5b506101b360048036038101906101ae9190612259565b610659565b6040516101c091906126df565b60405180910390f35b3480156101d557600080fd5b506101f060048036038101906101eb91906121bf565b6106de565b005b3480156101fe57600080fd5b50610219600480360381019061021491906122b3565b6107f6565b005b34801561022757600080fd5b50610242600480360381019061023d91906120a9565b6108b6565b005b34801561025057600080fd5b5061026b60048036038101906102669190612259565b610916565b60405161027891906127f8565b60405180910390f35b34801561028d57600080fd5b506102966109ae565b6040516102a3919061278a565b60405180910390f35b3480156102b857600080fd5b506102c1610ad5565b6040516102ce9190612a5e565b60405180910390f35b3480156102e357600080fd5b506102fe60048036038101906102f991906120a9565b610adb565b005b34801561030c57600080fd5b50610315610afb565b604051610322919061276f565b60405180910390f35b34801561033757600080fd5b50610352600480360381019061034d9190612259565b610bad565b60405161035f91906126df565b60405180910390f35b34801561037457600080fd5b5061038f600480360381019061038a919061203c565b610c5f565b60405161039c9190612a5e565b60405180910390f35b3480156103b157600080fd5b506103ba610d17565b6040516103c7919061283c565b60405180910390f35b3480156103dc57600080fd5b506103f760048036038101906103f2919061217f565b610da9565b005b610401610dbf565b60405161040e9190612a5e565b60405180910390f35b34801561042357600080fd5b5061043e600480360381019061043991906120fc565b610f86565b005b34801561044c57600080fd5b5061046760048036038101906104629190612259565b610fe8565b604051610474919061283c565b60405180910390f35b34801561048957600080fd5b5061049261108f565b60405161049f9190612a5e565b60405180910390f35b3480156104b457600080fd5b506104cf60048036038101906104ca9190612069565b611095565b6040516104dc919061278a565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105b057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105c057506105bf82611129565b5b9050919050565b6060600080546105d690612d35565b80601f016020809104026020016040519081016040528092919081815260200182805461060290612d35565b801561064f5780601f106106245761010080835404028352916020019161064f565b820191906000526020600020905b81548152906001019060200180831161063257829003601f168201915b5050505050905090565b600061066482611193565b6106a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069a906129de565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106e982610bad565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561075a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075190612a1e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166107796111ff565b73ffffffffffffffffffffffffffffffffffffffff1614806107a857506107a7816107a26111ff565b611095565b5b6107e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107de9061293e565b60405180910390fd5b6107f18383611207565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108a857337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161089f9291906126fa565b60405180910390fd5b6108b282826112c0565b5050565b6108c76108c16111ff565b82611452565b610906576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fd90612a3e565b60405180910390fd5b610911838383611530565b505050565b600080610921610afb565b90506000805b60058110156109a5578185118015610956575082816005811061094d5761094c612ece565b5b60200201518511155b156109785780600481111561096e5761096d612e70565b5b93505050506109a9565b82816005811061098b5761098a612ece565b5b60200201519150808061099d90612d98565b915050610927565b5050505b919050565b60003373ffffffffffffffffffffffffffffffffffffffff16601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a37906129fe565b60405180910390fd5b6000601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610a88906126ca565b60006040518083038185875af1925050503d8060008114610ac5576040519150601f19603f3d011682016040523d82523d6000602084013e610aca565b606091505b505090508091505090565b60115481565b610af683838360405180602001604052806000815250610f86565b505050565b610b03611deb565b610b0b611deb565b600a81600060058110610b2157610b20612ece565b5b602002018181525050602381600160058110610b4057610b3f612ece565b5b602002018181525050604381600260058110610b5f57610b5e612ece565b5b602002018181525050605181600360058110610b7e57610b7d612ece565b5b602002018181525050606481600460058110610b9d57610b9c612ece565b5b6020020181815250508091505090565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4d9061297e565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc79061295e565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610d2690612d35565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5290612d35565b8015610d9f5780601f10610d7457610100808354040283529160200191610d9f565b820191906000526020600020905b815481529060010190602001808311610d8257829003601f168201915b5050505050905090565b610dbb610db46111ff565b8383611797565b5050565b6000601154341015610e06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfd906128be565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600854600760009054906101000a900467ffffffffffffffff166003600960009054906101000a900463ffffffff16600960049054906101000a900463ffffffff166040518663ffffffff1660e01b8152600401610ea49594939291906127a5565b602060405180830381600087803b158015610ebe57600080fd5b505af1158015610ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef69190612286565b905033600a600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4e1c2f1eae56e29ec039a2b882eec626e6c420ed5a5b93a203c8b8b695e911b18133604051610f7b929190612a79565b60405180910390a190565b610f97610f916111ff565b83611452565b610fd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcd90612a3e565b60405180910390fd5b610fe284848484611904565b50505050565b6060600b8260058110610ffe57610ffd612ece565b5b01805461100a90612d35565b80601f016020809104026020016040519081016040528092919081815260200182805461103690612d35565b80156110835780601f1061105857610100808354040283529160200191611083565b820191906000526020600020905b81548152906001019060200180831161106657829003601f168201915b50505050509050919050565b60105481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661127a83610bad565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000600a600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006064836000815181106113105761130f612ece565b5b60200260200101516113229190612de1565b9050600061132f82610916565b905061133d83601054611960565b6113f8601054600b83600481111561135857611357612e70565b5b6005811061136957611368612ece565b5b01805461137590612d35565b80601f01602080910402602001604051908101604052809291908181526020018280546113a190612d35565b80156113ee5780601f106113c3576101008083540402835291602001916113ee565b820191906000526020600020905b8154815290600101906020018083116113d157829003601f168201915b505050505061197e565b60016010600082825461140b9190612b94565b925050819055507fab79897476febbd649710b1bd1dc3e93a316d3dee65f65b022ab89a4b7e206b58184604051611443929190612813565b60405180910390a15050505050565b600061145d82611193565b61149c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114939061291e565b60405180910390fd5b60006114a783610bad565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806114e957506114e88185611095565b5b8061152757508373ffffffffffffffffffffffffffffffffffffffff1661150f84610659565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661155082610bad565b73ffffffffffffffffffffffffffffffffffffffff16146115a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159d9061287e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160d906128de565b60405180910390fd5b6116218383836119f2565b61162c600082611207565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461167c9190612bea565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116d39190612b94565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46117928383836119f7565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611806576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fd906128fe565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516118f7919061278a565b60405180910390a3505050565b61190f848484611530565b61191b848484846119fc565b61195a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119519061285e565b60405180910390fd5b50505050565b61197a828260405180602001604052806000815250611b93565b5050565b61198782611193565b6119c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119bd9061299e565b60405180910390fd5b806006600084815260200190815260200160002090805190602001906119ed929190611e0d565b505050565b505050565b505050565b6000611a1d8473ffffffffffffffffffffffffffffffffffffffff16611bee565b15611b86578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611a466111ff565b8786866040518563ffffffff1660e01b8152600401611a689493929190612723565b602060405180830381600087803b158015611a8257600080fd5b505af1925050508015611ab357506040513d601f19601f82011682018060405250810190611ab0919061222c565b60015b611b36573d8060008114611ae3576040519150601f19603f3d011682016040523d82523d6000602084013e611ae8565b606091505b50600081511415611b2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b259061285e565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611b8b565b600190505b949350505050565b611b9d8383611c11565b611baa60008484846119fc565b611be9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be09061285e565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611c81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c78906129be565b60405180910390fd5b611c8a81611193565b15611cca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc19061289e565b60405180910390fd5b611cd6600083836119f2565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d269190612b94565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611de7600083836119f7565b5050565b6040518060a00160405280600590602082028036833780820191505090505090565b828054611e1990612d35565b90600052602060002090601f016020900481019282611e3b5760008555611e82565b82601f10611e5457805160ff1916838001178555611e82565b82800160010185558215611e82579182015b82811115611e81578251825591602001919060010190611e66565b5b509050611e8f9190611e93565b5090565b5b80821115611eac576000816000905550600101611e94565b5090565b6000611ec3611ebe84612ac7565b612aa2565b90508083825260208201905082856020860282011115611ee657611ee5612f31565b5b60005b85811015611f165781611efc8882612012565b845260208401935060208301925050600181019050611ee9565b5050509392505050565b6000611f33611f2e84612af3565b612aa2565b905082815260208101848484011115611f4f57611f4e612f36565b5b611f5a848285612cf3565b509392505050565b600081359050611f71816133eb565b92915050565b600082601f830112611f8c57611f8b612f2c565b5b8135611f9c848260208601611eb0565b91505092915050565b600081359050611fb481613402565b92915050565b600081359050611fc981613419565b92915050565b600081519050611fde81613419565b92915050565b600082601f830112611ff957611ff8612f2c565b5b8135612009848260208601611f20565b91505092915050565b60008135905061202181613430565b92915050565b60008151905061203681613430565b92915050565b60006020828403121561205257612051612f40565b5b600061206084828501611f62565b91505092915050565b600080604083850312156120805761207f612f40565b5b600061208e85828601611f62565b925050602061209f85828601611f62565b9150509250929050565b6000806000606084860312156120c2576120c1612f40565b5b60006120d086828701611f62565b93505060206120e186828701611f62565b92505060406120f286828701612012565b9150509250925092565b6000806000806080858703121561211657612115612f40565b5b600061212487828801611f62565b945050602061213587828801611f62565b935050604061214687828801612012565b925050606085013567ffffffffffffffff81111561216757612166612f3b565b5b61217387828801611fe4565b91505092959194509250565b6000806040838503121561219657612195612f40565b5b60006121a485828601611f62565b92505060206121b585828601611fa5565b9150509250929050565b600080604083850312156121d6576121d5612f40565b5b60006121e485828601611f62565b92505060206121f585828601612012565b9150509250929050565b60006020828403121561221557612214612f40565b5b600061222384828501611fba565b91505092915050565b60006020828403121561224257612241612f40565b5b600061225084828501611fcf565b91505092915050565b60006020828403121561226f5761226e612f40565b5b600061227d84828501612012565b91505092915050565b60006020828403121561229c5761229b612f40565b5b60006122aa84828501612027565b91505092915050565b600080604083850312156122ca576122c9612f40565b5b60006122d885828601612012565b925050602083013567ffffffffffffffff8111156122f9576122f8612f3b565b5b61230585828601611f77565b9150509250929050565b600061231b838361268e565b60208301905092915050565b61233081612c1e565b82525050565b61233f81612b2e565b6123498184612b5c565b925061235482612b24565b8060005b8381101561238557815161236c878261230f565b965061237783612b4f565b925050600181019050612358565b505050505050565b61239681612c30565b82525050565b6123a581612c3c565b82525050565b60006123b682612b39565b6123c08185612b67565b93506123d0818560208601612d02565b6123d981612f45565b840191505092915050565b6123ed81612ce1565b82525050565b60006123fe82612b44565b6124088185612b83565b9350612418818560208601612d02565b61242181612f45565b840191505092915050565b6000612439603283612b83565b915061244482612f56565b604082019050919050565b600061245c602583612b83565b915061246782612fa5565b604082019050919050565b600061247f601c83612b83565b915061248a82612ff4565b602082019050919050565b60006124a2602483612b83565b91506124ad8261301d565b604082019050919050565b60006124c5602483612b83565b91506124d08261306c565b604082019050919050565b60006124e8601983612b83565b91506124f3826130bb565b602082019050919050565b600061250b602c83612b83565b9150612516826130e4565b604082019050919050565b600061252e603883612b83565b915061253982613133565b604082019050919050565b6000612551602a83612b83565b915061255c82613182565b604082019050919050565b6000612574602983612b83565b915061257f826131d1565b604082019050919050565b6000612597602e83612b83565b91506125a282613220565b604082019050919050565b60006125ba602083612b83565b91506125c58261326f565b602082019050919050565b60006125dd602c83612b83565b91506125e882613298565b604082019050919050565b6000612600602383612b83565b915061260b826132e7565b604082019050919050565b6000612623602183612b83565b915061262e82613336565b604082019050919050565b6000612646600083612b78565b915061265182613385565b600082019050919050565b6000612669603183612b83565b915061267482613388565b604082019050919050565b61268881612c85565b82525050565b61269781612cb3565b82525050565b6126a681612cb3565b82525050565b6126b581612cbd565b82525050565b6126c481612ccd565b82525050565b60006126d582612639565b9150819050919050565b60006020820190506126f46000830184612327565b92915050565b600060408201905061270f6000830185612327565b61271c6020830184612327565b9392505050565b60006080820190506127386000830187612327565b6127456020830186612327565b612752604083018561269d565b818103606083015261276481846123ab565b905095945050505050565b600060a0820190506127846000830184612336565b92915050565b600060208201905061279f600083018461238d565b92915050565b600060a0820190506127ba600083018861239c565b6127c760208301876126bb565b6127d4604083018661267f565b6127e160608301856126ac565b6127ee60808301846126ac565b9695505050505050565b600060208201905061280d60008301846123e4565b92915050565b600060408201905061282860008301856123e4565b6128356020830184612327565b9392505050565b6000602082019050818103600083015261285681846123f3565b905092915050565b600060208201905081810360008301526128778161242c565b9050919050565b600060208201905081810360008301526128978161244f565b9050919050565b600060208201905081810360008301526128b781612472565b9050919050565b600060208201905081810360008301526128d781612495565b9050919050565b600060208201905081810360008301526128f7816124b8565b9050919050565b60006020820190508181036000830152612917816124db565b9050919050565b60006020820190508181036000830152612937816124fe565b9050919050565b6000602082019050818103600083015261295781612521565b9050919050565b6000602082019050818103600083015261297781612544565b9050919050565b6000602082019050818103600083015261299781612567565b9050919050565b600060208201905081810360008301526129b78161258a565b9050919050565b600060208201905081810360008301526129d7816125ad565b9050919050565b600060208201905081810360008301526129f7816125d0565b9050919050565b60006020820190508181036000830152612a17816125f3565b9050919050565b60006020820190508181036000830152612a3781612616565b9050919050565b60006020820190508181036000830152612a578161265c565b9050919050565b6000602082019050612a73600083018461269d565b92915050565b6000604082019050612a8e600083018561269d565b612a9b6020830184612327565b9392505050565b6000612aac612abd565b9050612ab88282612d67565b919050565b6000604051905090565b600067ffffffffffffffff821115612ae257612ae1612efd565b5b602082029050602081019050919050565b600067ffffffffffffffff821115612b0e57612b0d612efd565b5b612b1782612f45565b9050602081019050919050565b6000819050919050565b600060059050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612b9f82612cb3565b9150612baa83612cb3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612bdf57612bde612e12565b5b828201905092915050565b6000612bf582612cb3565b9150612c0083612cb3565b925082821015612c1357612c12612e12565b5b828203905092915050565b6000612c2982612c93565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050612c80826133d7565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000612cec82612c72565b9050919050565b82818337600083830152505050565b60005b83811015612d20578082015181840152602081019050612d05565b83811115612d2f576000848401525b50505050565b60006002820490506001821680612d4d57607f821691505b60208210811415612d6157612d60612e9f565b5b50919050565b612d7082612f45565b810181811067ffffffffffffffff82111715612d8f57612d8e612efd565b5b80604052505050565b6000612da382612cb3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612dd657612dd5612e12565b5b600182019050919050565b6000612dec82612cb3565b9150612df783612cb3565b925082612e0757612e06612e41565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f43616e6e6f74204d696e742064756520746f20696e73756666696369656e742060008201527f6665657300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4e6f74206861766520746865207065726d697373696f6e20746f20776974686460008201527f7261770000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b50565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b600581106133e8576133e7612e70565b5b50565b6133f481612c1e565b81146133ff57600080fd5b50565b61340b81612c30565b811461341657600080fd5b50565b61342281612c46565b811461342d57600080fd5b50565b61343981612cb3565b811461344457600080fd5b5056fea2646970667358221220c0638d1b5dab15be3158d110ba7786498e1da4c729d8a2fb94a672e7d77acf0764736f6c63430008050033",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c80635dacf5f4116100a0578063aa15249111610064578063aa152491146103f9578063b88d4fde14610417578063c87b56dd14610440578063d082e3811461047d578063e985e9c5146104a85761011f565b80635dacf5f4146103005780636352211e1461032b57806370a082311461036857806395d89b41146103a5578063a22cb465146103d05761011f565b806323b872dd116100e757806323b872dd1461021b5780632607aafa146102445780633ccfd60b146102815780634223edf7146102ac57806342842e0e146102d75761011f565b806301ffc9a71461012457806306fdde0314610161578063081812fc1461018c578063095ea7b3146101c95780631fe543e3146101f2575b600080fd5b34801561013057600080fd5b5061014b600480360381019061014691906121ff565b6104e5565b604051610158919061278a565b60405180910390f35b34801561016d57600080fd5b506101766105c7565b604051610183919061283c565b60405180910390f35b34801561019857600080fd5b506101b360048036038101906101ae9190612259565b610659565b6040516101c091906126df565b60405180910390f35b3480156101d557600080fd5b506101f060048036038101906101eb91906121bf565b6106de565b005b3480156101fe57600080fd5b50610219600480360381019061021491906122b3565b6107f6565b005b34801561022757600080fd5b50610242600480360381019061023d91906120a9565b6108b6565b005b34801561025057600080fd5b5061026b60048036038101906102669190612259565b610916565b60405161027891906127f8565b60405180910390f35b34801561028d57600080fd5b506102966109ae565b6040516102a3919061278a565b60405180910390f35b3480156102b857600080fd5b506102c1610ad5565b6040516102ce9190612a5e565b60405180910390f35b3480156102e357600080fd5b506102fe60048036038101906102f991906120a9565b610adb565b005b34801561030c57600080fd5b50610315610afb565b604051610322919061276f565b60405180910390f35b34801561033757600080fd5b50610352600480360381019061034d9190612259565b610bad565b60405161035f91906126df565b60405180910390f35b34801561037457600080fd5b5061038f600480360381019061038a919061203c565b610c5f565b60405161039c9190612a5e565b60405180910390f35b3480156103b157600080fd5b506103ba610d17565b6040516103c7919061283c565b60405180910390f35b3480156103dc57600080fd5b506103f760048036038101906103f2919061217f565b610da9565b005b610401610dbf565b60405161040e9190612a5e565b60405180910390f35b34801561042357600080fd5b5061043e600480360381019061043991906120fc565b610f86565b005b34801561044c57600080fd5b5061046760048036038101906104629190612259565b610fe8565b604051610474919061283c565b60405180910390f35b34801561048957600080fd5b5061049261108f565b60405161049f9190612a5e565b60405180910390f35b3480156104b457600080fd5b506104cf60048036038101906104ca9190612069565b611095565b6040516104dc919061278a565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105b057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105c057506105bf82611129565b5b9050919050565b6060600080546105d690612d35565b80601f016020809104026020016040519081016040528092919081815260200182805461060290612d35565b801561064f5780601f106106245761010080835404028352916020019161064f565b820191906000526020600020905b81548152906001019060200180831161063257829003601f168201915b5050505050905090565b600061066482611193565b6106a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069a906129de565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106e982610bad565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561075a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075190612a1e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166107796111ff565b73ffffffffffffffffffffffffffffffffffffffff1614806107a857506107a7816107a26111ff565b611095565b5b6107e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107de9061293e565b60405180910390fd5b6107f18383611207565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108a857337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161089f9291906126fa565b60405180910390fd5b6108b282826112c0565b5050565b6108c76108c16111ff565b82611452565b610906576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fd90612a3e565b60405180910390fd5b610911838383611530565b505050565b600080610921610afb565b90506000805b60058110156109a5578185118015610956575082816005811061094d5761094c612ece565b5b60200201518511155b156109785780600481111561096e5761096d612e70565b5b93505050506109a9565b82816005811061098b5761098a612ece565b5b60200201519150808061099d90612d98565b915050610927565b5050505b919050565b60003373ffffffffffffffffffffffffffffffffffffffff16601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a37906129fe565b60405180910390fd5b6000601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610a88906126ca565b60006040518083038185875af1925050503d8060008114610ac5576040519150601f19603f3d011682016040523d82523d6000602084013e610aca565b606091505b505090508091505090565b60115481565b610af683838360405180602001604052806000815250610f86565b505050565b610b03611deb565b610b0b611deb565b600a81600060058110610b2157610b20612ece565b5b602002018181525050602381600160058110610b4057610b3f612ece565b5b602002018181525050604381600260058110610b5f57610b5e612ece565b5b602002018181525050605181600360058110610b7e57610b7d612ece565b5b602002018181525050606481600460058110610b9d57610b9c612ece565b5b6020020181815250508091505090565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4d9061297e565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc79061295e565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610d2690612d35565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5290612d35565b8015610d9f5780601f10610d7457610100808354040283529160200191610d9f565b820191906000526020600020905b815481529060010190602001808311610d8257829003601f168201915b5050505050905090565b610dbb610db46111ff565b8383611797565b5050565b6000601154341015610e06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfd906128be565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600854600760009054906101000a900467ffffffffffffffff166003600960009054906101000a900463ffffffff16600960049054906101000a900463ffffffff166040518663ffffffff1660e01b8152600401610ea49594939291906127a5565b602060405180830381600087803b158015610ebe57600080fd5b505af1158015610ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef69190612286565b905033600a600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4e1c2f1eae56e29ec039a2b882eec626e6c420ed5a5b93a203c8b8b695e911b18133604051610f7b929190612a79565b60405180910390a190565b610f97610f916111ff565b83611452565b610fd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcd90612a3e565b60405180910390fd5b610fe284848484611904565b50505050565b6060600b8260058110610ffe57610ffd612ece565b5b01805461100a90612d35565b80601f016020809104026020016040519081016040528092919081815260200182805461103690612d35565b80156110835780601f1061105857610100808354040283529160200191611083565b820191906000526020600020905b81548152906001019060200180831161106657829003601f168201915b50505050509050919050565b60105481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661127a83610bad565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000600a600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006064836000815181106113105761130f612ece565b5b60200260200101516113229190612de1565b9050600061132f82610916565b905061133d83601054611960565b6113f8601054600b83600481111561135857611357612e70565b5b6005811061136957611368612ece565b5b01805461137590612d35565b80601f01602080910402602001604051908101604052809291908181526020018280546113a190612d35565b80156113ee5780601f106113c3576101008083540402835291602001916113ee565b820191906000526020600020905b8154815290600101906020018083116113d157829003601f168201915b505050505061197e565b60016010600082825461140b9190612b94565b925050819055507fab79897476febbd649710b1bd1dc3e93a316d3dee65f65b022ab89a4b7e206b58184604051611443929190612813565b60405180910390a15050505050565b600061145d82611193565b61149c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114939061291e565b60405180910390fd5b60006114a783610bad565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806114e957506114e88185611095565b5b8061152757508373ffffffffffffffffffffffffffffffffffffffff1661150f84610659565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661155082610bad565b73ffffffffffffffffffffffffffffffffffffffff16146115a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159d9061287e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160d906128de565b60405180910390fd5b6116218383836119f2565b61162c600082611207565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461167c9190612bea565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116d39190612b94565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46117928383836119f7565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611806576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fd906128fe565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516118f7919061278a565b60405180910390a3505050565b61190f848484611530565b61191b848484846119fc565b61195a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119519061285e565b60405180910390fd5b50505050565b61197a828260405180602001604052806000815250611b93565b5050565b61198782611193565b6119c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119bd9061299e565b60405180910390fd5b806006600084815260200190815260200160002090805190602001906119ed929190611e0d565b505050565b505050565b505050565b6000611a1d8473ffffffffffffffffffffffffffffffffffffffff16611bee565b15611b86578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611a466111ff565b8786866040518563ffffffff1660e01b8152600401611a689493929190612723565b602060405180830381600087803b158015611a8257600080fd5b505af1925050508015611ab357506040513d601f19601f82011682018060405250810190611ab0919061222c565b60015b611b36573d8060008114611ae3576040519150601f19603f3d011682016040523d82523d6000602084013e611ae8565b606091505b50600081511415611b2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b259061285e565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611b8b565b600190505b949350505050565b611b9d8383611c11565b611baa60008484846119fc565b611be9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be09061285e565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611c81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c78906129be565b60405180910390fd5b611c8a81611193565b15611cca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc19061289e565b60405180910390fd5b611cd6600083836119f2565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d269190612b94565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611de7600083836119f7565b5050565b6040518060a00160405280600590602082028036833780820191505090505090565b828054611e1990612d35565b90600052602060002090601f016020900481019282611e3b5760008555611e82565b82601f10611e5457805160ff1916838001178555611e82565b82800160010185558215611e82579182015b82811115611e81578251825591602001919060010190611e66565b5b509050611e8f9190611e93565b5090565b5b80821115611eac576000816000905550600101611e94565b5090565b6000611ec3611ebe84612ac7565b612aa2565b90508083825260208201905082856020860282011115611ee657611ee5612f31565b5b60005b85811015611f165781611efc8882612012565b845260208401935060208301925050600181019050611ee9565b5050509392505050565b6000611f33611f2e84612af3565b612aa2565b905082815260208101848484011115611f4f57611f4e612f36565b5b611f5a848285612cf3565b509392505050565b600081359050611f71816133eb565b92915050565b600082601f830112611f8c57611f8b612f2c565b5b8135611f9c848260208601611eb0565b91505092915050565b600081359050611fb481613402565b92915050565b600081359050611fc981613419565b92915050565b600081519050611fde81613419565b92915050565b600082601f830112611ff957611ff8612f2c565b5b8135612009848260208601611f20565b91505092915050565b60008135905061202181613430565b92915050565b60008151905061203681613430565b92915050565b60006020828403121561205257612051612f40565b5b600061206084828501611f62565b91505092915050565b600080604083850312156120805761207f612f40565b5b600061208e85828601611f62565b925050602061209f85828601611f62565b9150509250929050565b6000806000606084860312156120c2576120c1612f40565b5b60006120d086828701611f62565b93505060206120e186828701611f62565b92505060406120f286828701612012565b9150509250925092565b6000806000806080858703121561211657612115612f40565b5b600061212487828801611f62565b945050602061213587828801611f62565b935050604061214687828801612012565b925050606085013567ffffffffffffffff81111561216757612166612f3b565b5b61217387828801611fe4565b91505092959194509250565b6000806040838503121561219657612195612f40565b5b60006121a485828601611f62565b92505060206121b585828601611fa5565b9150509250929050565b600080604083850312156121d6576121d5612f40565b5b60006121e485828601611f62565b92505060206121f585828601612012565b9150509250929050565b60006020828403121561221557612214612f40565b5b600061222384828501611fba565b91505092915050565b60006020828403121561224257612241612f40565b5b600061225084828501611fcf565b91505092915050565b60006020828403121561226f5761226e612f40565b5b600061227d84828501612012565b91505092915050565b60006020828403121561229c5761229b612f40565b5b60006122aa84828501612027565b91505092915050565b600080604083850312156122ca576122c9612f40565b5b60006122d885828601612012565b925050602083013567ffffffffffffffff8111156122f9576122f8612f3b565b5b61230585828601611f77565b9150509250929050565b600061231b838361268e565b60208301905092915050565b61233081612c1e565b82525050565b61233f81612b2e565b6123498184612b5c565b925061235482612b24565b8060005b8381101561238557815161236c878261230f565b965061237783612b4f565b925050600181019050612358565b505050505050565b61239681612c30565b82525050565b6123a581612c3c565b82525050565b60006123b682612b39565b6123c08185612b67565b93506123d0818560208601612d02565b6123d981612f45565b840191505092915050565b6123ed81612ce1565b82525050565b60006123fe82612b44565b6124088185612b83565b9350612418818560208601612d02565b61242181612f45565b840191505092915050565b6000612439603283612b83565b915061244482612f56565b604082019050919050565b600061245c602583612b83565b915061246782612fa5565b604082019050919050565b600061247f601c83612b83565b915061248a82612ff4565b602082019050919050565b60006124a2602483612b83565b91506124ad8261301d565b604082019050919050565b60006124c5602483612b83565b91506124d08261306c565b604082019050919050565b60006124e8601983612b83565b91506124f3826130bb565b602082019050919050565b600061250b602c83612b83565b9150612516826130e4565b604082019050919050565b600061252e603883612b83565b915061253982613133565b604082019050919050565b6000612551602a83612b83565b915061255c82613182565b604082019050919050565b6000612574602983612b83565b915061257f826131d1565b604082019050919050565b6000612597602e83612b83565b91506125a282613220565b604082019050919050565b60006125ba602083612b83565b91506125c58261326f565b602082019050919050565b60006125dd602c83612b83565b91506125e882613298565b604082019050919050565b6000612600602383612b83565b915061260b826132e7565b604082019050919050565b6000612623602183612b83565b915061262e82613336565b604082019050919050565b6000612646600083612b78565b915061265182613385565b600082019050919050565b6000612669603183612b83565b915061267482613388565b604082019050919050565b61268881612c85565b82525050565b61269781612cb3565b82525050565b6126a681612cb3565b82525050565b6126b581612cbd565b82525050565b6126c481612ccd565b82525050565b60006126d582612639565b9150819050919050565b60006020820190506126f46000830184612327565b92915050565b600060408201905061270f6000830185612327565b61271c6020830184612327565b9392505050565b60006080820190506127386000830187612327565b6127456020830186612327565b612752604083018561269d565b818103606083015261276481846123ab565b905095945050505050565b600060a0820190506127846000830184612336565b92915050565b600060208201905061279f600083018461238d565b92915050565b600060a0820190506127ba600083018861239c565b6127c760208301876126bb565b6127d4604083018661267f565b6127e160608301856126ac565b6127ee60808301846126ac565b9695505050505050565b600060208201905061280d60008301846123e4565b92915050565b600060408201905061282860008301856123e4565b6128356020830184612327565b9392505050565b6000602082019050818103600083015261285681846123f3565b905092915050565b600060208201905081810360008301526128778161242c565b9050919050565b600060208201905081810360008301526128978161244f565b9050919050565b600060208201905081810360008301526128b781612472565b9050919050565b600060208201905081810360008301526128d781612495565b9050919050565b600060208201905081810360008301526128f7816124b8565b9050919050565b60006020820190508181036000830152612917816124db565b9050919050565b60006020820190508181036000830152612937816124fe565b9050919050565b6000602082019050818103600083015261295781612521565b9050919050565b6000602082019050818103600083015261297781612544565b9050919050565b6000602082019050818103600083015261299781612567565b9050919050565b600060208201905081810360008301526129b78161258a565b9050919050565b600060208201905081810360008301526129d7816125ad565b9050919050565b600060208201905081810360008301526129f7816125d0565b9050919050565b60006020820190508181036000830152612a17816125f3565b9050919050565b60006020820190508181036000830152612a3781612616565b9050919050565b60006020820190508181036000830152612a578161265c565b9050919050565b6000602082019050612a73600083018461269d565b92915050565b6000604082019050612a8e600083018561269d565b612a9b6020830184612327565b9392505050565b6000612aac612abd565b9050612ab88282612d67565b919050565b6000604051905090565b600067ffffffffffffffff821115612ae257612ae1612efd565b5b602082029050602081019050919050565b600067ffffffffffffffff821115612b0e57612b0d612efd565b5b612b1782612f45565b9050602081019050919050565b6000819050919050565b600060059050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612b9f82612cb3565b9150612baa83612cb3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612bdf57612bde612e12565b5b828201905092915050565b6000612bf582612cb3565b9150612c0083612cb3565b925082821015612c1357612c12612e12565b5b828203905092915050565b6000612c2982612c93565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050612c80826133d7565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000612cec82612c72565b9050919050565b82818337600083830152505050565b60005b83811015612d20578082015181840152602081019050612d05565b83811115612d2f576000848401525b50505050565b60006002820490506001821680612d4d57607f821691505b60208210811415612d6157612d60612e9f565b5b50919050565b612d7082612f45565b810181811067ffffffffffffffff82111715612d8f57612d8e612efd565b5b80604052505050565b6000612da382612cb3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612dd657612dd5612e12565b5b600182019050919050565b6000612dec82612cb3565b9150612df783612cb3565b925082612e0757612e06612e41565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f43616e6e6f74204d696e742064756520746f20696e73756666696369656e742060008201527f6665657300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4e6f74206861766520746865207065726d697373696f6e20746f20776974686460008201527f7261770000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b50565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b600581106133e8576133e7612e70565b5b50565b6133f481612c1e565b81146133ff57600080fd5b50565b61340b81612c30565b811461341657600080fd5b50565b61342281612c46565b811461342d57600080fd5b50565b61343981612cb3565b811461344457600080fd5b5056fea2646970667358221220c0638d1b5dab15be3158d110ba7786498e1da4c729d8a2fb94a672e7d77acf0764736f6c63430008050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 846,
        "contract": "contracts/RandomIPFSNFT.sol:RandomIPFSNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 848,
        "contract": "contracts/RandomIPFSNFT.sol:RandomIPFSNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 852,
        "contract": "contracts/RandomIPFSNFT.sol:RandomIPFSNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 856,
        "contract": "contracts/RandomIPFSNFT.sol:RandomIPFSNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 860,
        "contract": "contracts/RandomIPFSNFT.sol:RandomIPFSNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 866,
        "contract": "contracts/RandomIPFSNFT.sol:RandomIPFSNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1833,
        "contract": "contracts/RandomIPFSNFT.sol:RandomIPFSNFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2605,
        "contract": "contracts/RandomIPFSNFT.sol:RandomIPFSNFT",
        "label": "s_subscriptionId",
        "offset": 0,
        "slot": "7",
        "type": "t_uint64"
      },
      {
        "astId": 2607,
        "contract": "contracts/RandomIPFSNFT.sol:RandomIPFSNFT",
        "label": "s_gasLane",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 2609,
        "contract": "contracts/RandomIPFSNFT.sol:RandomIPFSNFT",
        "label": "s_callBackGasLimit",
        "offset": 0,
        "slot": "9",
        "type": "t_uint32"
      },
      {
        "astId": 2615,
        "contract": "contracts/RandomIPFSNFT.sol:RandomIPFSNFT",
        "label": "NUM_WORDS",
        "offset": 4,
        "slot": "9",
        "type": "t_uint32"
      },
      {
        "astId": 2619,
        "contract": "contracts/RandomIPFSNFT.sol:RandomIPFSNFT",
        "label": "requestIdtoAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2623,
        "contract": "contracts/RandomIPFSNFT.sol:RandomIPFSNFT",
        "label": "OliviaTokenURIS",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_string_storage)5_storage"
      },
      {
        "astId": 2625,
        "contract": "contracts/RandomIPFSNFT.sol:RandomIPFSNFT",
        "label": "tokenCounter",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2627,
        "contract": "contracts/RandomIPFSNFT.sol:RandomIPFSNFT",
        "label": "s_mintFee",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2629,
        "contract": "contracts/RandomIPFSNFT.sol:RandomIPFSNFT",
        "label": "owner",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)5_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[5]",
        "numberOfBytes": "160"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}